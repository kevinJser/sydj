********失业登记表单填充*********
1.功能模块包括【1.简单的登录；2.数据列表的获取；3.填充数据；4.附件下载】
2.manifest.json:浏览器扩展的配置对象
3.popup.html: 点击扩展弹出的操作页面,js/popup.js:弹出页的js文件
4.js/content.js: 填充功能的具体js文件
5.popup和content的通信通过chrome的api。具体见popup.js第430行,content.js第608行


*******登录*******
1.登录和主界面操作是一个界面，通过css来控制显示登录和主界面
2.用户的uid通过localStorage来进行存贮
3.退出账号后，界面切回登录界面，同时删除了localStorage种存贮的uid数据以及数据列表数据（表单数据）;
4.每次点开扩展，如果有uid则无需再次登录
5.每次登录都会删除uid以及表单数据
6.都在popup.js中执行


*******获取数据*******
1.点击获取数据，获取到的数据存到localStorage,并且展示为列表在界面上
2.每次点击获取数据都会从后台重新获取一遍，并且修改存在本地的数据


*******填充数据*******
1. 主要操作在content.js上
2. 通过填充列表中，当前的id去localStorage中获取对应的数据
3. 数据和页面元素的对应，找到对应的元素填充数据，填充数据的时候注意，一个是页面上显示的数据，一个是实际提交的数据(即隐藏的input)
4. 部分数据通过页面上趴到接口去获取数据
5. 注意： 因为没有实际账号信息，当填入身份证后，很多信息是可以直接展示出来的，插件里暂时无法体现，只能所有的数据都填进去，在content.js的
1394行的注释，这是可以触发原页面的身份证输入后的事件，这样可以填充很多表格数据，就不需要前面的一个个遍历填，后期可以根据真实数据去删除。
6. 填充的主要js从745行开始，用了try-catch,为的是很多元素没有加载完成直接执行会报错
7. 判断是否是在失业登记页面，是通过iframe的src来判断的，如果有更好的方法请更换
8. 填充完成后，由操作人员手动点击填充完成按钮。

*******填充完成*******
1.填充完成点击后，页面上的当前数据无法点击，同时设置localStorage填充完毕的id。 popup.js
2.本地存贮填充完毕的id是为了 再次点击扩展后，填充完毕的数据不能再填充
3. 未完成的是填充完毕点击后于后台的数据交互


*******附件上传*******
1. popup.js.
2. 点击填充，获取事件id，通过id去获取当前事项需要的图片路径。具体方法见fileRequest
3. 需要一直开着main.exe(后续上传 保定实现)


*******注意*******
1.当前获取数据没有传参给后台，后期需要传参去查询





